/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.cloudera.streaming.examples.flink.types;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ITrnx2 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1136868149292100965L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ITrnx2\",\"namespace\":\"com.cloudera.streaming.examples.flink.types\",\"fields\":[{\"name\":\"trnxId\",\"type\":\"long\"},{\"name\":\"ts\",\"type\":\"long\"},{\"name\":\"itemId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"qty\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ITrnx2> ENCODER =
      new BinaryMessageEncoder<ITrnx2>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ITrnx2> DECODER =
      new BinaryMessageDecoder<ITrnx2>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ITrnx2> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ITrnx2> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ITrnx2>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ITrnx2 to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ITrnx2 from a ByteBuffer. */
  public static ITrnx2 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long trnxId;
  @Deprecated public long ts;
  @Deprecated public java.lang.String itemId;
  @Deprecated public int qty;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ITrnx2() {}

  /**
   * All-args constructor.
   * @param trnxId The new value for trnxId
   * @param ts The new value for ts
   * @param itemId The new value for itemId
   * @param qty The new value for qty
   */
  public ITrnx2(java.lang.Long trnxId, java.lang.Long ts, java.lang.String itemId, java.lang.Integer qty) {
    this.trnxId = trnxId;
    this.ts = ts;
    this.itemId = itemId;
    this.qty = qty;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return trnxId;
    case 1: return ts;
    case 2: return itemId;
    case 3: return qty;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: trnxId = (java.lang.Long)value$; break;
    case 1: ts = (java.lang.Long)value$; break;
    case 2: itemId = (java.lang.String)value$; break;
    case 3: qty = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'trnxId' field.
   * @return The value of the 'trnxId' field.
   */
  public java.lang.Long getTrnxId() {
    return trnxId;
  }

  /**
   * Sets the value of the 'trnxId' field.
   * @param value the value to set.
   */
  public void setTrnxId(java.lang.Long value) {
    this.trnxId = value;
  }

  /**
   * Gets the value of the 'ts' field.
   * @return The value of the 'ts' field.
   */
  public java.lang.Long getTs() {
    return ts;
  }

  /**
   * Sets the value of the 'ts' field.
   * @param value the value to set.
   */
  public void setTs(java.lang.Long value) {
    this.ts = value;
  }

  /**
   * Gets the value of the 'itemId' field.
   * @return The value of the 'itemId' field.
   */
  public java.lang.String getItemId() {
    return itemId;
  }

  /**
   * Sets the value of the 'itemId' field.
   * @param value the value to set.
   */
  public void setItemId(java.lang.String value) {
    this.itemId = value;
  }

  /**
   * Gets the value of the 'qty' field.
   * @return The value of the 'qty' field.
   */
  public java.lang.Integer getQty() {
    return qty;
  }

  /**
   * Sets the value of the 'qty' field.
   * @param value the value to set.
   */
  public void setQty(java.lang.Integer value) {
    this.qty = value;
  }

  /**
   * Creates a new ITrnx2 RecordBuilder.
   * @return A new ITrnx2 RecordBuilder
   */
  public static com.cloudera.streaming.examples.flink.types.ITrnx2.Builder newBuilder() {
    return new com.cloudera.streaming.examples.flink.types.ITrnx2.Builder();
  }

  /**
   * Creates a new ITrnx2 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ITrnx2 RecordBuilder
   */
  public static com.cloudera.streaming.examples.flink.types.ITrnx2.Builder newBuilder(com.cloudera.streaming.examples.flink.types.ITrnx2.Builder other) {
    return new com.cloudera.streaming.examples.flink.types.ITrnx2.Builder(other);
  }

  /**
   * Creates a new ITrnx2 RecordBuilder by copying an existing ITrnx2 instance.
   * @param other The existing instance to copy.
   * @return A new ITrnx2 RecordBuilder
   */
  public static com.cloudera.streaming.examples.flink.types.ITrnx2.Builder newBuilder(com.cloudera.streaming.examples.flink.types.ITrnx2 other) {
    return new com.cloudera.streaming.examples.flink.types.ITrnx2.Builder(other);
  }

  /**
   * RecordBuilder for ITrnx2 instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ITrnx2>
    implements org.apache.avro.data.RecordBuilder<ITrnx2> {

    private long trnxId;
    private long ts;
    private java.lang.String itemId;
    private int qty;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.cloudera.streaming.examples.flink.types.ITrnx2.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.trnxId)) {
        this.trnxId = data().deepCopy(fields()[0].schema(), other.trnxId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ts)) {
        this.ts = data().deepCopy(fields()[1].schema(), other.ts);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.itemId)) {
        this.itemId = data().deepCopy(fields()[2].schema(), other.itemId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.qty)) {
        this.qty = data().deepCopy(fields()[3].schema(), other.qty);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ITrnx2 instance
     * @param other The existing instance to copy.
     */
    private Builder(com.cloudera.streaming.examples.flink.types.ITrnx2 other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.trnxId)) {
        this.trnxId = data().deepCopy(fields()[0].schema(), other.trnxId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ts)) {
        this.ts = data().deepCopy(fields()[1].schema(), other.ts);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.itemId)) {
        this.itemId = data().deepCopy(fields()[2].schema(), other.itemId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.qty)) {
        this.qty = data().deepCopy(fields()[3].schema(), other.qty);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'trnxId' field.
      * @return The value.
      */
    public java.lang.Long getTrnxId() {
      return trnxId;
    }

    /**
      * Sets the value of the 'trnxId' field.
      * @param value The value of 'trnxId'.
      * @return This builder.
      */
    public com.cloudera.streaming.examples.flink.types.ITrnx2.Builder setTrnxId(long value) {
      validate(fields()[0], value);
      this.trnxId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'trnxId' field has been set.
      * @return True if the 'trnxId' field has been set, false otherwise.
      */
    public boolean hasTrnxId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'trnxId' field.
      * @return This builder.
      */
    public com.cloudera.streaming.examples.flink.types.ITrnx2.Builder clearTrnxId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ts' field.
      * @return The value.
      */
    public java.lang.Long getTs() {
      return ts;
    }

    /**
      * Sets the value of the 'ts' field.
      * @param value The value of 'ts'.
      * @return This builder.
      */
    public com.cloudera.streaming.examples.flink.types.ITrnx2.Builder setTs(long value) {
      validate(fields()[1], value);
      this.ts = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ts' field has been set.
      * @return True if the 'ts' field has been set, false otherwise.
      */
    public boolean hasTs() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ts' field.
      * @return This builder.
      */
    public com.cloudera.streaming.examples.flink.types.ITrnx2.Builder clearTs() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'itemId' field.
      * @return The value.
      */
    public java.lang.String getItemId() {
      return itemId;
    }

    /**
      * Sets the value of the 'itemId' field.
      * @param value The value of 'itemId'.
      * @return This builder.
      */
    public com.cloudera.streaming.examples.flink.types.ITrnx2.Builder setItemId(java.lang.String value) {
      validate(fields()[2], value);
      this.itemId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'itemId' field has been set.
      * @return True if the 'itemId' field has been set, false otherwise.
      */
    public boolean hasItemId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'itemId' field.
      * @return This builder.
      */
    public com.cloudera.streaming.examples.flink.types.ITrnx2.Builder clearItemId() {
      itemId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'qty' field.
      * @return The value.
      */
    public java.lang.Integer getQty() {
      return qty;
    }

    /**
      * Sets the value of the 'qty' field.
      * @param value The value of 'qty'.
      * @return This builder.
      */
    public com.cloudera.streaming.examples.flink.types.ITrnx2.Builder setQty(int value) {
      validate(fields()[3], value);
      this.qty = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'qty' field has been set.
      * @return True if the 'qty' field has been set, false otherwise.
      */
    public boolean hasQty() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'qty' field.
      * @return This builder.
      */
    public com.cloudera.streaming.examples.flink.types.ITrnx2.Builder clearQty() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ITrnx2 build() {
      try {
        ITrnx2 record = new ITrnx2();
        record.trnxId = fieldSetFlags()[0] ? this.trnxId : (java.lang.Long) defaultValue(fields()[0]);
        record.ts = fieldSetFlags()[1] ? this.ts : (java.lang.Long) defaultValue(fields()[1]);
        record.itemId = fieldSetFlags()[2] ? this.itemId : (java.lang.String) defaultValue(fields()[2]);
        record.qty = fieldSetFlags()[3] ? this.qty : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ITrnx2>
    WRITER$ = (org.apache.avro.io.DatumWriter<ITrnx2>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ITrnx2>
    READER$ = (org.apache.avro.io.DatumReader<ITrnx2>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
